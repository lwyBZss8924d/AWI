diff --git a/content/renderer/render_frame_impl.cc b/content/renderer/render_frame_impl.cc
index 97cf24ad5f4a6..ab3f90752b11a 100644
--- a/content/renderer/render_frame_impl.cc
+++ b/content/renderer/render_frame_impl.cc
@@ -256,6 +256,15 @@
 #include "content/renderer/java/gin_java_bridge_dispatcher.h"
 #endif
 
+// html2svg includes
+#include <iostream>
+#include "cc/paint/paint_recorder.h"
+#include "cc/paint/skia_paint_canvas.h"
+#include "third_party/skia/include/core/SkStream.h"
+#include "third_party/skia/include/docs/SkPDFDocument.h"
+#include "third_party/skia/include/svg/SkSVGCanvas.h"
+#include "third_party/skia/include/svg/SkSVGCanvas.h"
+
 using base::Time;
 using blink::ContextMenuData;
 using blink::WebContentDecryptionModule;
@@ -3822,6 +3831,135 @@ void RenderFrameImpl::DidClearWindowObject() {
 
   for (auto& observer : observers_)
     observer.DidClearWindowObject();
+
+  // A Skia stream writing to stdout
+  class StdoutStream : public SkWStream {
+  public:
+    ~StdoutStream() override {
+      flush();
+      
+      delete[] fBytes;
+    }
+    
+    bool write(const void* data, size_t size) override {
+      auto* buffer = static_cast<const char*>(data);
+      size_t remaining = size;
+      size_t bufferSize = 8 * 1024;
+
+      while (remaining != 0) {
+        ssize_t length = std::min(bufferSize - fBytesBuffered, remaining);
+
+        std::memcpy(&fBytes[fBytesBuffered], &buffer[size - remaining], length);
+
+        remaining -= length;
+        fBytesWritten += length;
+        fBytesBuffered += length;
+
+        if (fBytesBuffered == bufferSize) {
+          flush();
+        }
+      }
+
+      return true;
+    }
+    
+    void flush() override {
+      if (::write(1, fBytes, fBytesBuffered) != -1) {
+        fBytesBuffered = 0;
+        fflush(stdout);
+      }
+    }
+    
+    size_t bytesWritten() const override {
+      return fBytesWritten;
+    }
+  
+  private:
+    char* fBytes = new char[8 * 1024];
+    size_t fBytesWritten = 0;
+    size_t fBytesBuffered = 0;
+  };
+
+  // Get access to the JS VM for this process (each tab is a process)
+  v8::Isolate *isolate = blink::MainThreadIsolate();
+  // Auto-clean v8 handles
+  v8::HandleScope handle_scope(isolate);
+  // Get the JS context for the current tab
+  v8::Local<v8::Context> context = GetWebFrame()->MainWorldScriptContext();
+  // Auto-clean v8 content
+  v8::Context::Scope context_scope(context);
+  // Get the global object (window)
+  v8::Local<v8::Object> global = context->Global();
+
+  // Create a new JS function binding
+  v8::Local<v8::FunctionTemplate> fn = v8::FunctionTemplate::New(
+      isolate,
+      [](const v8::FunctionCallbackInfo<v8::Value>& args) {
+        // Get access to the JS VM for this process (each Chrome tab is a process)
+        v8::Isolate *isolate = blink::MainThreadIsolate();
+        // Auto-clean v8 handles
+        v8::HandleScope handle_scope(isolate);
+        // Get the JS context for the current tab
+        v8::Local<v8::Context> context = isolate->GetCurrentContext();
+        // Auto-clean v8 content
+        v8::Context::Scope context_scope(context);
+        // Get the WebLocalFrame for the current v8 Context
+        auto* frame = WebLocalFrame::FrameForCurrentContext();
+        // Get the page size
+        auto size = frame->DocumentSize();
+        // Create an SVG canvas with the dimensions of the layer
+        uint32_t heightParam = args[0]->ToUint32(context).ToLocalChecked()->Value();
+        int width = size.width();
+        int height = heightParam == 0 ? size.height() : heightParam;
+        auto rect = SkRect::MakeWH(width, height);
+
+        cc::PaintRecorder recorder;
+
+        frame->CapturePaintPreview(
+          gfx::Rect(0, 0, width, height),
+          recorder.beginRecording(rect),
+          false,
+          true
+        );
+
+        // Create a memory stream to save the SVG content
+        StdoutStream stream;
+        // Get the recording data
+        auto picture = recorder.finishRecordingAsPicture();
+
+        switch(args[1]->ToUint32(context).ToLocalChecked()->Value()) {
+          // SVG
+          case 0: {
+            picture->Playback(SkSVGCanvas::Make(rect, &stream).get());
+
+            break;
+          }
+          // PDF
+          case 1: {
+            SkPDF::Metadata metadata;
+            v8::String::Utf8Value title(isolate, args[2]);
+
+            metadata.fTitle = *title;
+            metadata.fCreator = "html2svg PDF back-end";
+
+            auto document = SkPDF::MakeDocument(&stream, metadata);
+
+            picture->Playback(document->beginPage(width, height));
+            document->endPage();
+            document->close();
+
+            break;
+          }
+        }
+      }
+  );
+
+  // Register the function as "getPageContentsAsSVG"
+  global->Set(
+      context,
+      v8::String::NewFromUtf8(isolate, "getPageContentsAsSVG").ToLocalChecked(),
+      fn->GetFunction(context).ToLocalChecked()
+  ).Check();
 }
 
 void RenderFrameImpl::DidCreateDocumentElement() {
diff --git a/dbus/bus.cc b/dbus/bus.cc
index 34fe0908ac3c9..172675db23f35 100644
--- a/dbus/bus.cc
+++ b/dbus/bus.cc
@@ -396,8 +396,6 @@ bool Bus::Connect() {
     }
   }
   if (!connection_) {
-    LOG(ERROR) << "Failed to connect to the bus: "
-               << (error.is_set() ? error.message() : "");
     return false;
   }
 
diff --git a/skia/BUILD.gn b/skia/BUILD.gn
index 7a096b9a887d9..7440e54650989 100644
--- a/skia/BUILD.gn
+++ b/skia/BUILD.gn
@@ -316,6 +316,15 @@ component("skia") {
     ]
   }
 
+  deps += [ "//third_party/expat" ]
+  sources += [
+    "//third_party/skia/src/svg/SkSVGCanvas.cpp",
+    "//third_party/skia/src/svg/SkSVGDevice.cpp",
+    "//third_party/skia/src/xml/SkDOM.cpp",
+    "//third_party/skia/src/xml/SkXMLParser.cpp",
+    "//third_party/skia/src/xml/SkXMLWriter.cpp",
+  ]
+
   # The *_public variables should be added to 'public' not 'sources'.
   # However, Skia does not export enough *_public variables to make Chromium
   # 'gn check' clean. Until that can be done add the *_public variables to
@@ -386,9 +395,6 @@ component("skia") {
     sources += [ "//third_party/skia/src/core/SkUtilsArm.cpp" ]
   }
 
-  # Remove unused util sources.
-  sources -= [ "//third_party/skia/src/utils/SkParsePath.cpp" ]
-
   if (is_win) {
     sources -= [
       # Keeping _win.cpp
diff --git a/third_party/blink/renderer/core/frame/remote_frame_view.cc b/third_party/blink/renderer/core/frame/remote_frame_view.cc
index a3e8944556ccd..874863225fda7 100644
--- a/third_party/blink/renderer/core/frame/remote_frame_view.cc
+++ b/third_party/blink/renderer/core/frame/remote_frame_view.cc
@@ -419,7 +419,9 @@ uint32_t RemoteFrameView::Print(const gfx::Rect& rect,
 uint32_t RemoteFrameView::CapturePaintPreview(const gfx::Rect& rect,
                                               cc::PaintCanvas* canvas) const {
   auto* tracker = canvas->GetPaintPreviewTracker();
-  DCHECK(tracker);  // |tracker| must exist or there is a bug upstream.
+
+  // html2svg doesn't care about paint preview tracking
+  if (!tracker) return 0;
 
   // RACE: there is a possibility that the embedding token will be null and
   // still be in a valid state. This can occur is the frame has recently
diff --git a/third_party/blink/renderer/core/html/canvas/html_canvas_element.cc b/third_party/blink/renderer/core/html/canvas/html_canvas_element.cc
index cb2b900c4ff50..765153f982c29 100644
--- a/third_party/blink/renderer/core/html/canvas/html_canvas_element.cc
+++ b/third_party/blink/renderer/core/html/canvas/html_canvas_element.cc
@@ -934,7 +934,8 @@ void HTMLCanvasElement::PaintInternal(GraphicsContext& context,
 }
 
 bool HTMLCanvasElement::IsPrinting() const {
-  return GetDocument().BeforePrintingOrPrinting();
+  // Fake printing to vectorize <canvas> elements for html2svg
+  return true;
 }
 
 UkmParameters HTMLCanvasElement::GetUkmParameters() {
diff --git a/third_party/blink/renderer/platform/fonts/font.cc b/third_party/blink/renderer/platform/fonts/font.cc
index 67ba540bfc2b0..19e909d455835 100644
--- a/third_party/blink/renderer/platform/fonts/font.cc
+++ b/third_party/blink/renderer/platform/fonts/font.cc
@@ -47,6 +47,8 @@
 #include "third_party/skia/include/core/SkTextBlob.h"
 #include "ui/gfx/geometry/rect_f.h"
 
+#include "third_party/skia/include/utils/SkBase64.h"
+
 namespace blink {
 
 namespace {
@@ -153,7 +155,11 @@ void DrawBlobs(cc::PaintCanvas* canvas,
                const cc::PaintFlags& flags,
                const ShapeResultBloberizer::BlobBuffer& blobs,
                const gfx::PointF& point,
-               cc::NodeId node_id = cc::kInvalidNodeId) {
+               cc::NodeId node_id = cc::kInvalidNodeId) {  
+  if (getenv("html2svg_svg_mode") != nullptr) {
+    return;
+  }
+
   for (const auto& blob_info : blobs) {
     DCHECK(blob_info.blob);
     cc::PaintCanvasAutoRestore auto_restore(canvas, false);
@@ -198,8 +204,7 @@ void DrawBlobs(cc::PaintCanvas* canvas,
       }
     }
     if (node_id != cc::kInvalidNodeId) {
-      canvas->drawTextBlob(blob_info.blob, point.x(), point.y(), node_id,
-                           flags);
+      canvas->drawTextBlob(blob_info.blob, point.x(), point.y(), node_id, flags);
     } else {
       canvas->drawTextBlob(blob_info.blob, point.x(), point.y(), flags);
     }
@@ -230,6 +235,37 @@ void Font::DrawText(cc::PaintCanvas* canvas,
   if (ShouldSkipDrawing())
     return;
 
+  if (getenv("html2svg_svg_mode") != nullptr) {
+    auto string = StringView(
+      run_info.run.ToStringView(),
+      run_info.from,
+      run_info.to - run_info.from
+    ).ToString().Utf8();
+    auto* utf8 = string.c_str();
+    size_t length = std::strlen(utf8) + 1;
+    size_t buffer_length = SkBase64::Encode(utf8, length, nullptr);
+    auto buffer = std::make_unique<char[]>(buffer_length + 1);
+
+    SkBase64::Encode(utf8, length, buffer.get());
+    buffer[buffer_length] = '\0';
+
+    // Bypass HarfBuzz text shaping for the html2svg Skia back-end
+    auto blob = SkTextBlob::MakeFromString(
+      buffer.get(),
+      PrimaryFont()->
+        PlatformData().
+        CreateSkFont(false, &font_description_)
+    );
+
+    if (node_id != cc::kInvalidNodeId) {
+      canvas->drawTextBlob(blob, point.x(), point.y(), node_id, flags);
+    } else {
+      canvas->drawTextBlob(blob, point.x(), point.y(), flags);
+    }
+
+    return;
+  }
+
   CachingWordShaper word_shaper(*this);
   ShapeResultBuffer buffer;
   word_shaper.FillResultBuffer(run_info, &buffer);
@@ -253,6 +289,37 @@ void Font::DrawText(cc::PaintCanvas* canvas,
   if (ShouldSkipDrawing())
     return;
 
+  if (getenv("html2svg_svg_mode") != nullptr) {
+    auto string = StringView(
+      text_info.text,
+      text_info.from,
+      text_info.Length()
+    ).ToString().Utf8();
+    auto* utf8 = string.c_str();
+    size_t length = std::strlen(utf8) + 1;
+    size_t buffer_length = SkBase64::Encode(utf8, length, nullptr);
+    auto buffer = std::make_unique<char[]>(buffer_length + 1);
+
+    SkBase64::Encode(utf8, length, buffer.get());
+    buffer[buffer_length] = '\0';
+
+    // Bypass HarfBuzz text shaping for the html2svg Skia back-end
+    auto blob = SkTextBlob::MakeFromString(
+      buffer.get(),
+      PrimaryFont()->
+        PlatformData().
+        CreateSkFont(false, &font_description_)
+    );
+
+    if (node_id != cc::kInvalidNodeId) {
+      canvas->drawTextBlob(blob, point.x(), point.y(), node_id, flags);
+    } else {
+      canvas->drawTextBlob(blob, point.x(), point.y(), flags);
+    }
+
+    return;
+  }
+
   ShapeResultBloberizer::FillGlyphsNG bloberizer(
       GetFontDescription(), device_scale_factor > 1.0f, text_info.text,
       text_info.from, text_info.to, text_info.shape_result,
diff --git a/ui/gfx/linux/gpu_memory_buffer_support_x11.cc b/ui/gfx/linux/gpu_memory_buffer_support_x11.cc
index a03a63e305027..4335b751e0cf4 100644
--- a/ui/gfx/linux/gpu_memory_buffer_support_x11.cc
+++ b/ui/gfx/linux/gpu_memory_buffer_support_x11.cc
@@ -41,7 +41,6 @@ std::unique_ptr<ui::GbmDevice> CreateX11GbmDevice() {
 
   auto& dri3 = connection->dri3();
   if (!dri3.present()) {
-    LOG(ERROR) << "dri3 extension not supported.";
     return nullptr;
   }
 
