From fa52dbb68b7822ee4c01a697197e68ef1ab4a19c Mon Sep 17 00:00:00 2001
From: Fathy Boundjadj <hey@fathy.fr>
Date: Sun, 12 Feb 2023 01:29:05 +0100
Subject: [PATCH 11/14] Rename carbonyl::Renderer to carbonyl::Bridge

---
 headless/app/headless_shell.cc                     | 5 ++++-
 headless/app/headless_shell_main.cc                | 2 +-
 headless/lib/browser/headless_browser_impl.cc      | 8 ++++----
 headless/lib/browser/headless_browser_impl_aura.cc | 2 +-
 headless/lib/browser/headless_screen.cc            | 2 +-
 headless/lib/browser/headless_web_contents_impl.cc | 4 ++--
 6 files changed, 13 insertions(+), 10 deletions(-)

diff --git a/headless/app/headless_shell.cc b/headless/app/headless_shell.cc
index 5b51c22ae1da3..b6a52857e8f90 100644
--- a/headless/app/headless_shell.cc
+++ b/headless/app/headless_shell.cc
@@ -12,6 +12,7 @@
 #include "base/bind.h"
 #include "base/command_line.h"
 #include "base/files/file_util.h"
+#include "base/functional/callback.h"
 #include "base/i18n/rtl.h"
 #include "base/task/thread_pool.h"
 #include "build/branding_buildflags.h"
@@ -92,7 +93,9 @@ void HeadlessShell::OnBrowserStart(HeadlessBrowser* browser) {
   HeadlessBrowserContext::Builder context_builder =
       browser_->CreateBrowserContextBuilder();
 
-  context_builder.SetWindowSize(carbonyl::Renderer::Main()->GetSize());
+  carbonyl::Bridge::GetCurrent()->StartRenderer();
+
+  context_builder.SetWindowSize(carbonyl::Bridge::GetCurrent()->GetSize());
 
   // Retrieve the locale set by InitApplicationLocale() in
   // headless_content_main_delegate.cc in a way that is free of side-effects.
diff --git a/headless/app/headless_shell_main.cc b/headless/app/headless_shell_main.cc
index f9b8bac5c18a5..739df1ae1bd58 100644
--- a/headless/app/headless_shell_main.cc
+++ b/headless/app/headless_shell_main.cc
@@ -17,7 +17,7 @@
 #include "carbonyl/src/browser/bridge.h"
 
 int main(int argc, const char** argv) {
-  carbonyl_shell_main();
+  carbonyl::Bridge::Main();
 
 #if BUILDFLAG(IS_WIN)
   sandbox::SandboxInterfaceInfo sandbox_info = {nullptr};
diff --git a/headless/lib/browser/headless_browser_impl.cc b/headless/lib/browser/headless_browser_impl.cc
index fd45d215479ab..1df3ffe72c93d 100644
--- a/headless/lib/browser/headless_browser_impl.cc
+++ b/headless/lib/browser/headless_browser_impl.cc
@@ -119,7 +119,7 @@ void HeadlessBrowserImpl::set_browser_main_parts(
 }
 
 void HeadlessBrowserImpl::Resize() {
-  auto size = carbonyl::Renderer::GetSize();
+  auto size = carbonyl::Bridge::GetCurrent()->Resize();
   auto rect = gfx::Rect(0, 0, size.width(), size.height());
 
   for (auto* ctx: GetAllBrowserContexts()) {
@@ -134,7 +134,7 @@ void HeadlessBrowserImpl::Resize() {
     }
   }
 
-  carbonyl::Renderer::Main()->Resize();
+  carbonyl::Bridge::GetCurrent()->Resize();
 }
 
 void HeadlessBrowserImpl::OnShutdownInput() {
@@ -279,7 +279,7 @@ void HeadlessBrowserImpl::OnKeyPressInput(char key) {
       blink::WebKeyboardEvent::Type::kRawKeyDown,
       blink::WebInputEvent::kNoModifiers,
       base::TimeTicks::Now());
-  
+
   // TODO(fathy): support IME
   switch (key) {
     case 0x11:
@@ -500,7 +500,7 @@ void HeadlessBrowserImpl::RunOnStartCallback() {
       }
     };
 
-    carbonyl::Renderer::Main()->Listen(&delegate);
+    carbonyl::Bridge::GetCurrent()->Listen(&delegate);
   });
 }
 
diff --git a/headless/lib/browser/headless_browser_impl_aura.cc b/headless/lib/browser/headless_browser_impl_aura.cc
index 508660db32151..80340d9f1b3b3 100644
--- a/headless/lib/browser/headless_browser_impl_aura.cc
+++ b/headless/lib/browser/headless_browser_impl_aura.cc
@@ -59,7 +59,7 @@ void HeadlessBrowserImpl::PlatformSetWebContentsBounds(
     const gfx::Rect& bounds) {
   // Browser's window bounds should contain all web contents, so that we're sure
   // that we will actually produce visible damage when taking a screenshot.
-  web_contents->window_tree_host()->SetBoundsInPixels(ScaleToEnclosedRect(bounds, carbonyl::Renderer::GetDPI()));
+  web_contents->window_tree_host()->SetBoundsInPixels(ScaleToEnclosedRect(bounds, carbonyl::Bridge::GetCurrent()->GetDPI()));
   web_contents->window_tree_host()->window()->SetBounds(bounds);
 
   gfx::NativeView native_view = web_contents->web_contents()->GetNativeView();
diff --git a/headless/lib/browser/headless_screen.cc b/headless/lib/browser/headless_screen.cc
index 8bf00ef5e036a..89c5ccc8d7759 100644
--- a/headless/lib/browser/headless_screen.cc
+++ b/headless/lib/browser/headless_screen.cc
@@ -51,7 +51,7 @@ display::Display HeadlessScreen::GetDisplayNearestWindow(
 HeadlessScreen::HeadlessScreen(const gfx::Rect& screen_bounds) {
   static int64_t synthesized_display_id = 2000;
   display::Display display(synthesized_display_id++);
-  float dpi = carbonyl::Renderer::GetDPI();
+  float dpi = carbonyl::Bridge::GetCurrent()->GetDPI();
   display.SetScaleAndBounds(dpi, ScaleToEnclosedRect(screen_bounds, dpi));
   ProcessDisplayChanged(display, true /* is_primary */);
 }
diff --git a/headless/lib/browser/headless_web_contents_impl.cc b/headless/lib/browser/headless_web_contents_impl.cc
index fad8c3fdd2bfe..a166a08f6ea15 100644
--- a/headless/lib/browser/headless_web_contents_impl.cc
+++ b/headless/lib/browser/headless_web_contents_impl.cc
@@ -400,7 +400,7 @@ void HeadlessWebContentsImpl::TitleWasSet(content::NavigationEntry* entry) {
   if (!web_contents() || !web_contents()->GetPrimaryMainFrame()->IsActive())
     return;
 
-  carbonyl::Renderer::Main()->SetTitle(base::UTF16ToUTF8(entry->GetTitleForDisplay()));
+  carbonyl::Bridge::GetCurrent()->SetTitle(base::UTF16ToUTF8(entry->GetTitleForDisplay()));
 }
 
 void HeadlessWebContentsImpl::DidFinishNavigation(content::NavigationHandle* handle) {
@@ -411,7 +411,7 @@ void HeadlessWebContentsImpl::DidFinishNavigation(content::NavigationHandle* han
 
   auto& nav = web_contents()->GetController();
 
-  carbonyl::Renderer::Main()->PushNav(
+  carbonyl::Bridge::GetCurrent()->PushNav(
     handle->GetURL().spec(),
     nav.CanGoBack(),
     nav.CanGoForward()
